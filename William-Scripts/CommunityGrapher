###########################
##   Graph Communities   ##
###########################

function progress_bar {
	while true
	do
		echo -ne "."
		sleep 2
	done
}

function stop_progress {
	exec 2>/dev/null
	kill $1
	echo -en "\n"
}

echo "------ Community Grapher ------"
path="$1"
mkdir -p output

if [ -z "$path" ]; then
	echo "Please enter number of variables:"
	read vars
	echo "Please enter number of clauses:"
	read clauses
	echo "Please enter number of communities:"
	read cmtys
	echo "Please enter quality of communities:"
	read q

	echo -n "Generating dimacs file"
	progress_bar &
	pid=$!
	
	../Haskell/Cmty $vars $clauses $cmtys $q > output/community.dimacs
	path="output/community.dimacs"
	
	stop_progress $pid
fi

if [ -z "$2" ]; then
  echo "To use GraphViz enter graphviz or to use UbiGraph enter ubigraph:"
  read graph
else
  graph="$2"
fi

if [ -z "$3" ]; then
  echo "Please enter clause to indicate that clauses are nodes and variables are vertices or variable for the opposite:"
  read isClauseNodes
else
  isClauseNodes="$3"
fi
if [ $graph == "graphviz" ]; then
  if [ -z "$4" ]; then
    echo "Do you want to generate the graph slowly but with more detail? (Y/n)"
    read detail
  else
    detail="$4"
  fi
fi

echo -n "Generating Graph Information"
progress_bar &
pid=$!

# Populate community
cat $path | ../Haskell/Bcp | ../Haskell/Graph $isClauseNodes > output/graph.dot
cat output/graph.dot | ../Bin/community -i:/dev/stdin -o:/dev/stdout | grep -v "#" > output/communityMapping.dot

if [ $graph == "graphviz" ]; then
  ./Helpers/graphHelper.rb
else
  ./Helpers/graphHelperUbi.rb
fi

stop_progress $pid

if [ $graph == "graphviz" ]; then
  echo -n "Waiting on GraphViz"
  progress_bar &
  pid=$!

  # Graph
  if [ $5 == "gif" ]; then
    ext="jpg"
  else
    ext="svg"
  fi

  if [ $detail == "Y" ]; then
    dot -T"$ext" output/communitySubGraphs.dot -o output/communityGraph."$ext"
  else
    sfdp -T"$ext" output/communitySubGraphs.dot -o output/communityGraph."$ext"
  fi
  
  if [ $5 == "gif" ]; then
    modularity=$(cat $path | ./CommunityOutputOnlyModularity)
    convert output/communityGraph."$ext" -gravity north -stroke none -fill black -annotate 0 "Modularity = $modularity" output/communityGraph."$ext"
  fi

  stop_progress $pid
  if [ -z "$5" ]; then
    xdg-open output/communityGraph.svg
  fi
fi
