###########################
##   Graph Communities   ##
###########################

function progress_bar {
	while true
	do
		echo -ne "."
		sleep 2
	done
}

function stop_progress {
	exec 2>/dev/null
	kill $1
	echo -en "\n"
}

function parseToGraphVizFormat {
	sed -i -e 's/ / -> /g' "$1"
	sed -i '1idigraph community { \n edge[dir=none, color=blue] \n node[shape=point, color=red]' "$1"
	echo "}" >> "$1"
}

echo "------ Community Grapher ------"
path="$1"
mkdir -p output

if [ -z "$path" ]; then
	echo "Please enter number of variables:"
	read vars
	echo "Please enter number of clauses:"
	read clauses
	echo "Please enter number of communities:"
	read cmtys
	echo "Please enter quality of communities:"
	read q

	echo -n "Generating dimacs file"
	progress_bar &
	pid=$!
	
	Haskell/Cmty $vars $clauses $cmtys $q > output/community.dimacs
	path="output/community.dimacs"
	
	stop_progress $pid
fi

echo "Please enter clause to indicate that clauses are nodes and variables are vertices or variable for the opposite:"
read isClauseNodes

echo -n "Generating Graph Information"
progress_bar &
pid=$!

# Populate community
cat $path | Haskell/Bcp | Haskell/Graph $isClauseNodes > output/graph.dot
cat output/graph.dot | Bin/community -i:/dev/stdin -o:/dev/stdout | grep -v "#" > output/communityMapping.dot
parseToGraphVizFormat output/graph.dot
parseToGraphVizFormat output/communityMapping.dot

stop_progress $pid

echo -n "Waiting on GraphViz"
progress_bar &
pid=$!

# Graph
sfdp -Tpng output/communityMapping.dot -o output/communityMappingGraph.png
sfdp -Tpng output/graph.dot -o output/communityGraph.png

stop_progress $pid
xdg-open output/communityGraph.png
